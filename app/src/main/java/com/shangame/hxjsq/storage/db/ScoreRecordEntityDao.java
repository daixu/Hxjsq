package com.shangame.hxjsq.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.hxjsq.storage.model.ScoreRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORE_RECORD_ENTITY".
*/
public class ScoreRecordEntityDao extends AbstractDao<ScoreRecordEntity, Long> {

    public static final String TABLENAME = "SCORE_RECORD_ENTITY";

    /**
     * Properties of entity ScoreRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Name2 = new Property(2, String.class, "name2", false, "NAME2");
        public final static Property Name3 = new Property(3, String.class, "name3", false, "NAME3");
        public final static Property Score = new Property(4, double.class, "score", false, "SCORE");
        public final static Property Score2 = new Property(5, double.class, "score2", false, "SCORE2");
        public final static Property Score3 = new Property(6, double.class, "score3", false, "SCORE3");
        public final static Property Number = new Property(7, long.class, "number", false, "NUMBER");
    }


    public ScoreRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORE_RECORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NAME2\" TEXT," + // 2: name2
                "\"NAME3\" TEXT," + // 3: name3
                "\"SCORE\" REAL NOT NULL ," + // 4: score
                "\"SCORE2\" REAL NOT NULL ," + // 5: score2
                "\"SCORE3\" REAL NOT NULL ," + // 6: score3
                "\"NUMBER\" INTEGER NOT NULL );"); // 7: number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORE_RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScoreRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String name2 = entity.getName2();
        if (name2 != null) {
            stmt.bindString(3, name2);
        }
 
        String name3 = entity.getName3();
        if (name3 != null) {
            stmt.bindString(4, name3);
        }
        stmt.bindDouble(5, entity.getScore());
        stmt.bindDouble(6, entity.getScore2());
        stmt.bindDouble(7, entity.getScore3());
        stmt.bindLong(8, entity.getNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScoreRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String name2 = entity.getName2();
        if (name2 != null) {
            stmt.bindString(3, name2);
        }
 
        String name3 = entity.getName3();
        if (name3 != null) {
            stmt.bindString(4, name3);
        }
        stmt.bindDouble(5, entity.getScore());
        stmt.bindDouble(6, entity.getScore2());
        stmt.bindDouble(7, entity.getScore3());
        stmt.bindLong(8, entity.getNumber());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScoreRecordEntity readEntity(Cursor cursor, int offset) {
        ScoreRecordEntity entity = new ScoreRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name3
            cursor.getDouble(offset + 4), // score
            cursor.getDouble(offset + 5), // score2
            cursor.getDouble(offset + 6), // score3
            cursor.getLong(offset + 7) // number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScoreRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScore(cursor.getDouble(offset + 4));
        entity.setScore2(cursor.getDouble(offset + 5));
        entity.setScore3(cursor.getDouble(offset + 6));
        entity.setNumber(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScoreRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScoreRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScoreRecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
